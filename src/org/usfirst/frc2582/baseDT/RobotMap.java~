// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2582.baseDT;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainTopLeft;
    public static SpeedController driveTrainBottonLeft;
    public static SpeedControllerGroup driveTrainLeftMotors;
    public static SpeedController driveTrainTopRight;
    public static SpeedController driveTrainBottonRight;
    public static SpeedControllerGroup driveTrainRightMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainTopLeft = new Spark(3);
        LiveWindow.addActuator("DriveTrain", "TopLeft", (Spark) driveTrainTopLeft);
        driveTrainTopLeft.setInverted(false);
        driveTrainBottonLeft = new Spark(2);
        LiveWindow.addActuator("DriveTrain", "BottonLeft", (Spark) driveTrainBottonLeft);
        driveTrainBottonLeft.setInverted(false);
        driveTrainLeftMotors = new SpeedControllerGroup(driveTrainTopLeft, driveTrainBottonLeft  );
        LiveWindow.addActuator("DriveTrain", "LeftMotors", driveTrainLeftMotors);
        
        driveTrainTopRight = new Spark(0);
        LiveWindow.addActuator("DriveTrain", "TopRight", (Spark) driveTrainTopRight);
        driveTrainTopRight.setInverted(false);
        driveTrainBottonRight = new Spark(1);
        LiveWindow.addActuator("DriveTrain", "BottonRight", (Spark) driveTrainBottonRight);
        driveTrainBottonRight.setInverted(false);
        driveTrainRightMotors = new SpeedControllerGroup(driveTrainTopRight, driveTrainBottonRight  );
        LiveWindow.addActuator("DriveTrain", "RightMotors", driveTrainRightMotors);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
